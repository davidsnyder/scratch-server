Working through https://defn.io/2018/02/25/web-app-from-scratch-01/

python3 server.py 
curl -X GET -v 127.0.0.1:9000

nc -l 9000
nc 127.0.0.1 9000

open two terminal windows and send data using netcat
use netcat to send files back and forth:
 Start by using nc to listen on a specific port, with output captured into a file:
           $ nc -l 1234 > filename.out
     Using a second machine, connect to the listening nc process, feeding it the file which is to be trans-
     ferred:
           $ nc host.example.com 1234 < filename.in

listen on a port using netcat and make a GET request in the browser, watch the request appear in the terminal
manually send back an HTML response, watch it appear in the browser

HTTP/1.1 200 OK
Content-type: text/html
Content-length: 5

Hello

(can also send HTML tags, obviously)

nc google.com 80, send garbage and see the headers for the 400 Bad Request
nc google.com 80, make a head request "HEAD / HTTP/1.0" or GET request. You can manually make requests just like a browser would
 $ echo -n "GET / HTTP/1.0\r\n\r\n" | nc host.example.com 80
If you get a 403 Forbidden, pass the Host in as part of the headers, eg: "Host: apple.com"

use ping to resolve the DNS of a website and get the IP address
 $ ping google.com
 build an email server from hand (port 25 for SMTP vs 80 for HTTP)

 nc -u -z hostname.com 1-100 (make a UDP connection to ports 1-100 on the server, will always succeed, but will show you the protocols)

 port vs. socket (socket = IP address + port)


 build a server from scratch, from always sending 200, to 404 and 400, to actually serving files
 GET parameters
 then be able to accept other requests: HEAD, POST
 connecting to a database and saving/retrieving records
 start with a flat file (tsv,csv) database and move to sqlite
 how to write SQL
 How can we style our pages using HTML/CSS/Javascript?
 What else can we do with sockets?



GET forms and POST forms
save a POST form and change the method type to "GET", see the parameters being passed explicitly
browsers/servers use cookies on the client to handle state
HTTP vs HTTPS


Why do we need parameters? When are hyperlinks not enough? (REST tries to map resources more explicitly using hyperlinks)
Start with using GET with forms
Simple search box, grab some data from a hash table in memory (using GET requests), then move to flat files, then to SQLite

eventually you need a separation of concerns (M-V-C)

grab the form data from a website (using inspect) and try to login by dumping the headers (with the cookies) and passing them in manually
curl -v -d "authenticity_token=LTQfQB6MSU8LbRxfbHLrXqBy0py2Pv07dezrk6YRj58%3D&person%5Bemail_address%5D=dsnyder90%40gmail.com" --dump-headers headers 750words.com/auth/signin
curl -L -v -b headers 750words.com > 750words_logged_in.html ; open 750words_logged_in.html

What is an API?
echo '{"text": "Hello **world**!"}' | curl -d @- https://api.github.com/markdown

What is REST?


What is a blockchain? 
Can we make a cryptocurrency?
do the checksum work by hand



make a form to GET information from the server, then another to POST new information to the server
A POST request can't be made from the address bar, while a GET can.

GET - safe and idempotent
A safe operation is an operation which does not change the data requested.
An idempotent operation is one in which the result will be the same no matter how many times you request it.
POST - neither safe nor idempotent, used to create resources. submitting twice creates two new resources
PUT - not safe but idempotent; can be run many times, but always replaces the same resource (at a given URI)
